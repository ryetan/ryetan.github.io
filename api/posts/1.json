{"total":2,"pageSize":10,"pageCount":1,"data":[{"title":"Hello World","slug":"hello-world","date":"2022-01-04T09:30:49.719Z","updated":"2022-01-04T09:30:49.723Z","comments":true,"path":"api/articles/hello-world.json","excerpt":"","keywords":null,"cover":null,"content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the ","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"k8s入门操作手册","slug":"k8s入门操作手册","date":"2022-01-04T09:25:31.000Z","updated":"2022-01-04T09:27:13.196Z","comments":true,"path":"api/articles/k8s入门操作手册.json","excerpt":"","keywords":null,"cover":"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/955fb674952742d6947d4c8328754ac0~tplv-k3u1fbpfcp-zoom-crop-mark:1304:1304:1304:734.awebp","content":"<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/955fb674952742d6947d4c8328754ac0~tplv-k3u1fbpfcp-zoom-crop-mark:1304:1304:1304:734.awebp\" alt=\"kubernetes运维操作手册（持续更新）\"></p>\n<blockquote>\n<p>本篇文章从一个go编写的无状态demo，梳理下k8s比较常用的操作内容。</p>\n</blockquote>\n<h2 id=\"文章内容结构：\"><a href=\"#文章内容结构：\" class=\"headerlink\" title=\"文章内容结构：\"></a>文章内容结构：</h2><p>1.构建go编写的的docker镜像，包含一个healthZ健康检查的接口 （已更新）</p>\n<p>2.编写deployment.yaml并部署（已更新）</p>\n<p>3.更新deployment对象（已更新）</p>\n<p>4.排障并回滚deployment对象（已更新）</p>\n<p>5.简单缩放deployment对象（已更新）</p>\n<p>6.metrics-server部署，HPA实战（已更新）</p>\n<p>7.k8s内应用网络连接（ingress，headlessservice&amp;service）（已更新）</p>\n<p>8.存活，就绪probe详解（已更新）</p>\n<p>9.安装prometheus，配置aggregator，monitor测试customer-metricserver（未完成）</p>\n<h2 id=\"一、构建go-web测试镜像（main函数包含一个healthZ接口）\"><a href=\"#一、构建go-web测试镜像（main函数包含一个healthZ接口）\" class=\"headerlink\" title=\"一、构建go-web测试镜像（main函数包含一个healthZ接口）\"></a>一、构建go-web测试镜像（main函数包含一个healthZ接口）</h2><h3 id=\"Go代码目录\"><a href=\"#Go代码目录\" class=\"headerlink\" title=\"Go代码目录\"></a>Go代码目录</h3><p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bda7ecebb7ab474987b49076e0510212~tplv-k3u1fbpfcp-watermark.awebp\"></p>\n<h3 id=\"main-go（有一个healthZ的接口，跑在8888端口上）\"><a href=\"#main-go（有一个healthZ的接口，跑在8888端口上）\" class=\"headerlink\" title=\"main.go（有一个healthZ的接口，跑在8888端口上）\"></a>main.go（有一个healthZ的接口，跑在8888端口上）</h3><pre><code>package main\nimport (\n   &quot;fmt&quot;\n   &quot;net/http&quot;\n)\nfunc main() &#123;\n   http.HandleFunc(&quot;/healthZ&quot;,health)\n   fmt.Println(&quot;web run&quot;)\n   http.ListenAndServe(&quot;:8888&quot;,nil)\n&#125;\nfunc health(w http.ResponseWriter,req *http.Request)&#123;\n   fmt.Fprintf(w,&quot;Hello GO WEB\\n&quot;)\n&#125;\n</code></pre>\n<h3 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h3><pre><code>FROM golang:1.15-alpine3.13 AS builder\nWORKDIR /build\nRUN adduser -u 10001 -D app-runner\nENV GOPROXY https://goproxy.cn\nCOPY go.mod .\n#COPY go.sum .\nRUN go mod download\nCOPY . .\nRUN CGO_ENABLED=0 GOARCH=amd64 GOOS=linux go build -a -o webDemo .\nFROM alpine:3.13 AS final\nWORKDIR /app\nCOPY --from=builder /build/webDemo /app/\n#COPY --from=builder /build/config /app/config\nCOPY --from=builder /etc/passwd /etc/passwd\nCOPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/\nUSER app-runner\nENTRYPOINT [&quot;/app/webDemo&quot;]\n</code></pre>\n<h3 id=\"构建docker镜像后push到远程仓库（这里为了方便直接用dockerhub）\"><a href=\"#构建docker镜像后push到远程仓库（这里为了方便直接用dockerhub）\" class=\"headerlink\" title=\"构建docker镜像后push到远程仓库（这里为了方便直接用dockerhub）\"></a>构建docker镜像后push到远程仓库（这里为了方便直接用dockerhub）</h3><pre><code>docker build -t ryetan/webdemo:v1 .\n...\n[+] Building 261.3s (18/18) FINISHED\n...\ndocker push ryetan/webdemo:v1\n</code></pre>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/33b200c816b6405ebeae39aaab9c31b5~tplv-k3u1fbpfcp-watermark.awebp\"></p>\n<blockquote>\n<p>上图 ryetan/webdemo:v1 这个docker镜像就是本次练习需要使用的镜像</p>\n</blockquote>\n<h3 id=\"本地运行下这个镜像测试下功能：\"><a href=\"#本地运行下这个镜像测试下功能：\" class=\"headerlink\" title=\"本地运行下这个镜像测试下功能：\"></a>本地运行下这个镜像测试下功能：</h3><pre><code>docker run -it -d -p 18888:8888 ryetan/webdemo:v1\ncurl 127.0.0.1:18888/healthZ\nHello GO WEB \n</code></pre>\n<h2 id=\"二、编写deployment-yaml并部署到kubernetes\"><a href=\"#二、编写deployment-yaml并部署到kubernetes\" class=\"headerlink\" title=\"二、编写deployment.yaml并部署到kubernetes\"></a>二、编写deployment.yaml并部署到kubernetes</h2><blockquote>\n<p>官方文档：<a href=\"https://link.juejin.cn/?target=https://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/\" title=\"https://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/\">kubernetes.io/zh/docs/con…</a></p>\n</blockquote>\n<h3 id=\"官网上deployment控制器图解\"><a href=\"#官网上deployment控制器图解\" class=\"headerlink\" title=\"官网上deployment控制器图解\"></a>官网上deployment控制器图解</h3><p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/97ec7b1e26d94ca0babda1010efb163b~tplv-k3u1fbpfcp-watermark.awebp\"></p>\n<h3 id=\"我们根据上面的图，使用自己构建的镜像定义deployment-yaml\"><a href=\"#我们根据上面的图，使用自己构建的镜像定义deployment-yaml\" class=\"headerlink\" title=\"我们根据上面的图，使用自己构建的镜像定义deployment.yaml\"></a>我们根据上面的图，使用自己构建的镜像定义deployment.yaml</h3><pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: web-demo-deployment\n  labels:\n    app: web-demo\nspec:\n  #ReplicaSet对象，约束pod数量\n  replicas: 3\n  selector:\n    matchLabels:\n      app: web-demo\n  template:\n    metadata:\n      labels:\n        app: web-demo\n    spec:\n      containers:\n      - name: web-demo\n        image: ryetan/webdemo:v1\n        ports:\n        - containerPort: 8888 \n</code></pre>\n<h3 id=\"参考官网字段说明：\"><a href=\"#参考官网字段说明：\" class=\"headerlink\" title=\"参考官网字段说明：\"></a>参考官网字段说明：</h3><ul>\n<li><p>  创建名为 web-demo-deployment（由 .<a href=\"https://link.juejin.cn/?target=http://metadata.name/\" title=\"http://metadata.name/\">metadata.name</a> 字段标明）的 Deployment。</p>\n</li>\n<li><p>  该 Deployment 创建三个（由 replicas 字段标明）Pod 副本。</p>\n</li>\n<li><p>  selector 字段定义 Deployment 如何查找要管理的 Pods。 在这里，你只需选择在 Pod 模板中定义的标签（app:web-demo）。 不过，更复杂的选择规则是也可能的，只要 Pod 模板本身满足所给规则即可。</p>\n</li>\n<li><blockquote>\n<p>说明： matchLabels 字段是 {key,value} 偶对的映射。在 matchLabels 映射中的单个 {key,value} 映射等效于 matchExpressions 中的一个元素，即其 key 字段是 “key”，operator 为 “In”，value 数组仅包含 “value”。在 matchLabels 和 matchExpressions 中给出的所有条件都必须满足才能匹配。</p>\n</blockquote>\n</li>\n<li><p>  template 字段包含以下子字段：</p>\n</li>\n<li><ul>\n<li>  Pod 被使用 labels 字段打上 app:web-demo 标签。</li>\n</ul>\n</li>\n<li><p>  Pod 模板规约（即 .template.spec 字段）指示 Pods 运行一个web-demo 容器， 该容器运行版本为 v1 的 ryetan/webdemo <a href=\"https://link.juejin.cn/?target=https://hub.docker.com/\" title=\"https://hub.docker.com/\">Docker Hub</a>镜像。</p>\n</li>\n<li><p>  创建一个容器并使用 name 字段将其命名为 web-demo。</p>\n</li>\n</ul>\n<h3 id=\"一些deployment相关的常用命令：\"><a href=\"#一些deployment相关的常用命令：\" class=\"headerlink\" title=\"一些deployment相关的常用命令：\"></a>一些deployment相关的常用命令：</h3><ul>\n<li><p>  查看 Deployment 对象的状态变化 : kubectl rollout status</p>\n</li>\n<li><p>  获取ReplicaSet：kubectl get rs</p>\n</li>\n<li><p>  查看每个 Pod 自动生成的标签：kubectl get pods –show-labels</p>\n</li>\n</ul>\n<h3 id=\"踩坑提醒：多个控制器不要控制同一种标签的pod，会有问题。\"><a href=\"#踩坑提醒：多个控制器不要控制同一种标签的pod，会有问题。\" class=\"headerlink\" title=\"踩坑提醒：多个控制器不要控制同一种标签的pod，会有问题。\"></a>踩坑提醒：多个控制器不要控制同一种标签的pod，会有问题。</h3><h2 id=\"三、更新deployment对象（这里更新下镜像版本v2）\"><a href=\"#三、更新deployment对象（这里更新下镜像版本v2）\" class=\"headerlink\" title=\"三、更新deployment对象（这里更新下镜像版本v2）\"></a>三、更新deployment对象（这里更新下镜像版本v2）</h2><pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: web-demo-deployment\n  labels:\n    app: web-demo\nspec:\n  #ReplicaSet对象，约束pod数量\n  replicas: 3\n  selector:\n    matchLabels:\n      app: web-demo\n  template:\n    metadata:\n      labels:\n        app: web-demo\n    spec:\n      containers:\n      - name: web-demo\n        image: ryetan/webdemo:v2\n        ports:        \n           - containerPort: 8888\n</code></pre>\n<p>deployment更新的逻辑，整理自官方文档：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2a319022e37347f7a1c1f5bf9b30d6f3~tplv-k3u1fbpfcp-watermark.awebp\"></p>\n<p>更新后，查看新创建的rs，以及被缩容的老rs</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c9e61da2c85d407aaf73cb4030dd5496~tplv-k3u1fbpfcp-watermark.awebp\"></p>\n<h2 id=\"四、排障并回滚deployment\"><a href=\"#四、排障并回滚deployment\" class=\"headerlink\" title=\"四、排障并回滚deployment\"></a>四、排障并回滚deployment</h2><blockquote>\n<p>将一个不存在的镜像ryetan/webdemo:v99 用来更新template image字段，制造故障</p>\n</blockquote>\n<h3 id=\"排障示例：\"><a href=\"#排障示例：\" class=\"headerlink\" title=\"排障示例：\"></a>排障示例：</h3><p>通过event事件获取信息：</p>\n<pre><code>ryetan@ryetandeMacBook-Pro ~ % kubectl get event -n default    \nLAST SEEN   TYPE      REASON    OBJECT                                     MESSAGE\n49m         Normal    Pulling   pod/web-demo-deployment-5d9f78687f-5276z   Pulling image &quot;ryetan/webdemo:v99&quot;\n55m         Warning   Failed    pod/web-demo-deployment-5d9f78687f-5276z   Failed to pull image &quot;ryetan/webdemo:v99&quot;: rpc error: code = Unknown desc = Error response from daemon: manifest for ryetan/webdemo:v99 not found: manifest unknown: manifest unknown \n</code></pre>\n<p>查看pod信息概览：</p>\n<pre><code>ryetan@ryetandeMacBook-Pro ~ % kubectl get pods  \nNAME                                   READY   STATUS             RESTARTS   AGE\nweb-demo-deployment-5d9f78687f-5276z   0/1     ImagePullBackOff   0          46h\nweb-demo-deployment-7b76f44f95-fgjhj   1/1     Running            0          47h\nweb-demo-deployment-7b76f44f95-hsx4v   1/1     Running            0          47h\nweb-demo-deployment-7b76f44f95-qlrjv   1/1     Running            0          47h \n复制代码\n</code></pre>\n<p>其它常用命令：</p>\n<pre><code>kubectl get rs\nkubectl get deployment\nkubectl describe deployment/web-demo-deployment\n</code></pre>\n<h3 id=\"回滚相关知识：\"><a href=\"#回滚相关知识：\" class=\"headerlink\" title=\"回滚相关知识：\"></a>回滚相关知识：</h3><p>查看老的发布版本，发现只有版本号没有commit message：</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/413bc1b30a7741e2b356c314ee79bedd~tplv-k3u1fbpfcp-watermark.awebp\"></p>\n<p>一般情况下，为了记录，也为了可能存在的排障需求，在命令后追加 <code>--record</code>，如下图：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/67b6208fe0924a1c9bce7e6be15a1808~tplv-k3u1fbpfcp-watermark.awebp\"></p>\n<p>回滚命令比较简单如下：</p>\n<pre><code>#回退上个版本\nkubectl rollout undo deployment/web-demo-deployment \n#如果回退到指定版本\n--to-revision=4\n</code></pre>\n<h2 id=\"五、简单缩放deployment对象\"><a href=\"#五、简单缩放deployment对象\" class=\"headerlink\" title=\"五、简单缩放deployment对象\"></a>五、简单缩放deployment对象</h2><h3 id=\"简单使用scale缩放下-看下效果：\"><a href=\"#简单使用scale缩放下-看下效果：\" class=\"headerlink\" title=\"简单使用scale缩放下,看下效果：\"></a>简单使用scale缩放下,看下效果：</h3><pre><code>kubectl scale deployment/web-demo-deployment --replicas=5\nkubectl scale deployment/web-demo-deployment --replicas=2\n</code></pre>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/73819d490baf4cddaa1090a46b8edef7~tplv-k3u1fbpfcp-watermark.awebp\"></p>\n<h2 id=\"六、metricserver部署，实战HPA\"><a href=\"#六、metricserver部署，实战HPA\" class=\"headerlink\" title=\"六、metricserver部署，实战HPA\"></a>六、metricserver部署，实战HPA</h2><h3 id=\"HPA功能使用步骤：\"><a href=\"#HPA功能使用步骤：\" class=\"headerlink\" title=\"HPA功能使用步骤：\"></a>HPA功能使用步骤：</h3><ol>\n<li><p> 检查aggregator是否开启</p>\n</li>\n<li><p> 开启metrics-server</p>\n</li>\n<li><p> 配置deployment下资源对象（pod）的request，声明一个针对deployment的HPA对象</p>\n</li>\n</ol>\n<h3 id=\"先说aggregator和metric-server以及hpa的关系，看图：\"><a href=\"#先说aggregator和metric-server以及hpa的关系，看图：\" class=\"headerlink\" title=\"先说aggregator和metric-server以及hpa的关系，看图：\"></a>先说aggregator和metric-server以及hpa的关系，看图：</h3><p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4846bb7a3b7745898d7632e44db9a0be~tplv-k3u1fbpfcp-watermark.awebp\"></p>\n<blockquote>\n<p>aggregator就是个proxy，放在kube-apiserver上面一层（不知道kube-apiserver的先去看看官方文档），metrics-server在aggregator下面一层，配置好了之后，能让外面通过api地址访问到，然后，HPA就能通过aggregator拿到metrics-server和自定义的custom metrics数据（比如prometheus，后面再说）</p>\n</blockquote>\n<h3 id=\"所以，我们按照一开始说的步骤来搞下：\"><a href=\"#所以，我们按照一开始说的步骤来搞下：\" class=\"headerlink\" title=\"所以，我们按照一开始说的步骤来搞下：\"></a>所以，我们按照一开始说的步骤来搞下：</h3><blockquote>\n<p>如果你是使用 kubeadm 或者官方的 <a href=\"https://link.juejin.cn/?target=http://kube-up.sh/\" title=\"http://kube-up.sh/\">kube-up.sh</a> 脚本部署 Kubernetes 集群的话，aggregator 模式就是默认开启的；</p>\n<p>如果是手动 DIY 搭建的话，你就需要在 kube-apiserver 的启动参数里加上如下所示的配置，或者去master机器的/etc/manifests改静态pod的配置：</p>\n</blockquote>\n<h3 id=\"一个题外话：-etc-manifests这个地址的静态文件是如何给kubelet用的呢？\"><a href=\"#一个题外话：-etc-manifests这个地址的静态文件是如何给kubelet用的呢？\" class=\"headerlink\" title=\"一个题外话：/etc/manifests这个地址的静态文件是如何给kubelet用的呢？\"></a>一个题外话：/etc/manifests这个地址的静态文件是如何给kubelet用的呢？</h3><p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/66668355935044148146c68dbd6fa6dd~tplv-k3u1fbpfcp-watermark.awebp\"></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b6b347a53c846fc9964a14dc4a90921~tplv-k3u1fbpfcp-watermark.awebp\"></p>\n<h3 id=\"可以看到这个configmap是配置给kubelet的，于是找到manifests这个目录下相对应的apiserver配置，加上如下配置即可：\"><a href=\"#可以看到这个configmap是配置给kubelet的，于是找到manifests这个目录下相对应的apiserver配置，加上如下配置即可：\" class=\"headerlink\" title=\"可以看到这个configmap是配置给kubelet的，于是找到manifests这个目录下相对应的apiserver配置，加上如下配置即可：\"></a>可以看到这个configmap是配置给kubelet的，于是找到manifests这个目录下相对应的apiserver配置，加上如下配置即可：</h3><p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5acacef9c7164a6b80fd679837fae590~tplv-k3u1fbpfcp-watermark.awebp\"></p>\n<blockquote>\n<p>上面的知识涉及到静态pod，如果你是用kubeadm装的k8s，可以忽略这一步，不要看这段啰嗦的图文。</p>\n</blockquote>\n<h3 id=\"接着，部署metrics-server\"><a href=\"#接着，部署metrics-server\" class=\"headerlink\" title=\"接着，部署metrics-server\"></a>接着，部署metrics-server</h3><blockquote>\n<p>文档：<a href=\"https://link.juejin.cn/?target=https://github.com/kubernetes-sigs/metrics-server\" title=\"https://github.com/kubernetes-sigs/metrics-server\">github.com/kubernetes-…</a></p>\n</blockquote>\n<pre><code>kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml\n---\nserviceaccount/metrics-server created\nclusterrole.rbac.authorization.k8s.io/system:aggregated-metrics-reader created\nclusterrole.rbac.authorization.k8s.io/system:metrics-server created\nrolebinding.rbac.authorization.k8s.io/metrics-server-auth-reader created\nclusterrolebinding.rbac.authorization.k8s.io/metrics-server:system:auth-delegator created\nclusterrolebinding.rbac.authorization.k8s.io/system:metrics-server created\nservice/metrics-server created\ndeployment.apps/metrics-server created\napiservice.apiregistration.k8s.io/v1beta1.metrics.k8s.io created\n</code></pre>\n<h3 id=\"在部署的时候，大概率会遇到镜像拉不下来这个问题，围绕k8s会多次碰到镜像问题，解决思路也比较简单，去国内能找到镜像的地方找到，然后tag修改下：\"><a href=\"#在部署的时候，大概率会遇到镜像拉不下来这个问题，围绕k8s会多次碰到镜像问题，解决思路也比较简单，去国内能找到镜像的地方找到，然后tag修改下：\" class=\"headerlink\" title=\"在部署的时候，大概率会遇到镜像拉不下来这个问题，围绕k8s会多次碰到镜像问题，解决思路也比较简单，去国内能找到镜像的地方找到，然后tag修改下：\"></a>在部署的时候，大概率会遇到镜像拉不下来这个问题，围绕k8s会多次碰到镜像问题，解决思路也比较简单，去国内能找到镜像的地方找到，然后tag修改下：</h3><p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e52e0ce2117f4c24b9d5c2ca6720ff4c~tplv-k3u1fbpfcp-watermark.awebp\"></p>\n<h3 id=\"我是从阿里获取的：\"><a href=\"#我是从阿里获取的：\" class=\"headerlink\" title=\"我是从阿里获取的：\"></a>我是从阿里获取的：</h3><pre><code>docker pull registry.cn-hangzhou.aliyuncs.com/xbazhen/metrics-server:v0.4.2\ndocker tag registry.cn-hangzhou.aliyuncs.com/xbazhen/metrics-server:v0.4.1 k8s.gcr.io/metrics-server:v0.4.2\n</code></pre>\n<p>也可以直接去改metrics-server-deployment.yaml，把image改了。</p>\n<h3 id=\"还有个错误tips：\"><a href=\"#还有个错误tips：\" class=\"headerlink\" title=\"还有个错误tips：\"></a>还有个错误tips：</h3><p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/58c464e9f87a4758aa8872ee92603952~tplv-k3u1fbpfcp-watermark.awebp\"></p>\n<h3 id=\"使用以下方法解决：\"><a href=\"#使用以下方法解决：\" class=\"headerlink\" title=\"使用以下方法解决：\"></a>使用以下方法解决：</h3><pre><code>修改metrics-server-deployment.yaml中镜像源k8s.gcr.io为\nregistry.cn-hangzhou.aliyuncs.com/google_containers\n并添加修改以下参数\nimagePullPolicy: IfNotPresent\nargs:\n- --metric-resolution=30s\n- --kubelet-preferred-address-types=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP\n- --kubelet-insecure-tls\n# --metric-resolution=30s：从 kubelet 采集数据的周期；\n# --kubelet-preferred-address-types：优先使用 InternalIP 来访问 kubelet，这样可以避免节点名称没有 DNS 解析记录时，通过节点名称调用节点 kubelet API 失败的情况（未配置时默认的情况）；\n# --kubelet-insecure-tls：kubelet 的10250端口使用的是https协议，连接需要验证tls证书。--kubelet-insecure-tls不验证客户端证书\n# 将metrics-server-deployment.yaml文件中的镜像拉取策略修改为&quot;IfNotPresent&quot;；\n</code></pre>\n<h3 id=\"kubectl-top-nodes-命令测试下：\"><a href=\"#kubectl-top-nodes-命令测试下：\" class=\"headerlink\" title=\"kubectl top nodes 命令测试下：\"></a>kubectl top nodes 命令测试下：</h3><pre><code>ryetan@ryetandeMacBook-Pro deployment % kubectl top nodesNAME            CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%  ryek8master01   70m          3%     1944Mi          52%  \n</code></pre>\n<h3 id=\"命令的方式声明一个HPA资源：\"><a href=\"#命令的方式声明一个HPA资源：\" class=\"headerlink\" title=\"命令的方式声明一个HPA资源：\"></a>命令的方式声明一个HPA资源：</h3><pre><code>kubectl  autoscale deployment/web-demo-deployment --min=3 --max=6 --cpu-percent=60\n</code></pre>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bef56216205d4818a5011aba0503a92c~tplv-k3u1fbpfcp-watermark.awebp\"></p>\n<h3 id=\"并不会生效，因为需要配置pod的request：\"><a href=\"#并不会生效，因为需要配置pod的request：\" class=\"headerlink\" title=\"并不会生效，因为需要配置pod的request：\"></a>并不会生效，因为需要配置pod的request：</h3><p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/134b7d829b6b4014875301f21d91f944~tplv-k3u1fbpfcp-watermark.awebp\"></p>\n<h3 id=\"yaml里增加以下request的描述：\"><a href=\"#yaml里增加以下request的描述：\" class=\"headerlink\" title=\"yaml里增加以下request的描述：\"></a>yaml里增加以下request的描述：</h3><pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: web-demo-deployment\n  labels:\n    app: web-demo\nspec:\n  #ReplicaSet对象，约束pod数量\n  replicas: 3\n  selector:\n    matchLabels:\n      app: web-demo\n  template:\n    metadata:\n      labels:\n        app: web-demo\n    spec:\n      containers:\n      - name: web-demo\n        image: ryetan/webdemo:v1\n        resources:\n          request:\n            cpu: &quot;250m&quot;\n            memory: &quot;64Mi&quot;\n        ports:\n        - containerPort: 8888\n</code></pre>\n<h3 id=\"配置完之后观察下：\"><a href=\"#配置完之后观察下：\" class=\"headerlink\" title=\"配置完之后观察下：\"></a>配置完之后观察下：</h3><p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d638df5ac6264301b3d44a0b84208d46~tplv-k3u1fbpfcp-watermark.awebp\"></p>\n<h3 id=\"修改下hpa对象，再观察下：\"><a href=\"#修改下hpa对象，再观察下：\" class=\"headerlink\" title=\"修改下hpa对象，再观察下：\"></a>修改下hpa对象，再观察下：</h3><p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f706b64fb8df49b2bab1927eb6ef8102~tplv-k3u1fbpfcp-watermark.awebp\"></p>\n<h3 id=\"可以看到自动缩容成功：\"><a href=\"#可以看到自动缩容成功：\" class=\"headerlink\" title=\"可以看到自动缩容成功：\"></a>可以看到自动缩容成功：</h3><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/defab9a68c844b759108628057b5b87d~tplv-k3u1fbpfcp-watermark.awebp\"></p>\n<h2 id=\"七、k8s内应用网络连接（ingress、service）\"><a href=\"#七、k8s内应用网络连接（ingress、service）\" class=\"headerlink\" title=\"七、k8s内应用网络连接（ingress、service）\"></a>七、k8s内应用网络连接（ingress、service）</h2><blockquote>\n<p>service官方文档：<a href=\"https://link.juejin.cn/?target=https://kubernetes.io/zh/docs/concepts/services-networking/service/\" title=\"https://kubernetes.io/zh/docs/concepts/services-networking/service/\">kubernetes.io/zh/docs/con…</a></p>\n<p>service分为两种，普通的，以及无头的headless service，建议参考上面的文档详细理解</p>\n</blockquote>\n<h3 id=\"编写一个service的yaml\"><a href=\"#编写一个service的yaml\" class=\"headerlink\" title=\"编写一个service的yaml\"></a>编写一个service的yaml</h3><pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: web-demo-service\nspec:\n  selector:\n    app: web-demo\n  ports:\n  - name: web-demo-service-port\n    protocol: TCP\n    port: 80\n    #这里可以用端口号，用pod里面的name可以更加解耦#\n    targetPort: web-demo-port\n    #这里可以用端口号，用pod里面的name可以更加解耦# \n</code></pre>\n<h3 id=\"查看下service的endpoint，以及测试直接访问pod和通过service访问\"><a href=\"#查看下service的endpoint，以及测试直接访问pod和通过service访问\" class=\"headerlink\" title=\"查看下service的endpoint，以及测试直接访问pod和通过service访问\"></a>查看下service的endpoint，以及测试直接访问pod和通过service访问</h3><p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f4a06b9783ac45bc9f2dea6b9a64ac8f~tplv-k3u1fbpfcp-watermark.awebp\"></p>\n<h3 id=\"在pod里测试下dns-service-a记录\"><a href=\"#在pod里测试下dns-service-a记录\" class=\"headerlink\" title=\"在pod里测试下dns service a记录\"></a>在pod里测试下dns service a记录</h3><p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/41d9c801b07845d79acdf458af825981~tplv-k3u1fbpfcp-watermark.awebp\"></p>\n<h3 id=\"在pod里测试下dns-pod-a记录\"><a href=\"#在pod里测试下dns-pod-a记录\" class=\"headerlink\" title=\"在pod里测试下dns pod a记录\"></a>在pod里测试下dns pod a记录</h3><p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/53004a4e72d24e52a7f7732c0acd9263~tplv-k3u1fbpfcp-watermark.awebp\"></p>\n<h3 id=\"编写headless-service-yaml\"><a href=\"#编写headless-service-yaml\" class=\"headerlink\" title=\"编写headless service yaml\"></a>编写headless service yaml</h3><pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: web-demo-service\nspec:\n  clusterIP: None  selector:\n    app: web-demo\n  ports:\n  - name: web-demo-service-port\n    protocol: TCP\n    port: 80\n    #这里可以用端口号，用pod里面的name可以更加解耦#\n    targetPort: web-demo-port\n    #这里可以用端口号，用pod里面的name可以更加解耦# \n</code></pre>\n<h3 id=\"在pod里测试下dns-service-a记录-1\"><a href=\"#在pod里测试下dns-service-a记录-1\" class=\"headerlink\" title=\"在pod里测试下dns service a记录\"></a>在pod里测试下dns service a记录</h3><p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2221ba8e2aca42d5b7e2b8222bd78ba0~tplv-k3u1fbpfcp-watermark.awebp\"></p>\n<h3 id=\"客户端通过Ingress访问POD的逻辑\"><a href=\"#客户端通过Ingress访问POD的逻辑\" class=\"headerlink\" title=\"客户端通过Ingress访问POD的逻辑\"></a>客户端通过Ingress访问POD的逻辑</h3><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/982e16e6fa234b988250059669710b15~tplv-k3u1fbpfcp-watermark.awebp\"></p>\n<h3 id=\"Ingress-安装（不用新版本的准入控制）\"><a href=\"#Ingress-安装（不用新版本的准入控制）\" class=\"headerlink\" title=\"Ingress 安装（不用新版本的准入控制）\"></a>Ingress 安装（不用新版本的准入控制）</h3><blockquote>\n<p>文档地址：<a href=\"https://link.juejin.cn/?target=https://github.com/kubernetes/ingress-nginx/blob/nginx-0.30.0/docs/deploy/index.md%23bare-metal\" title=\"https://github.com/kubernetes/ingress-nginx/blob/nginx-0.30.0/docs/deploy/index.md#bare-metal\">github.com/kubernetes/…</a></p>\n</blockquote>\n<h3 id=\"部署Ingress-yaml\"><a href=\"#部署Ingress-yaml\" class=\"headerlink\" title=\"部署Ingress yaml\"></a>部署Ingress yaml</h3><pre><code>kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.30.0/deploy/static/mandatory.yaml\n复制代码\n</code></pre>\n<h3 id=\"如果是bare-metal-安装，Ingress前面还要有一层service来代理所有的ingress对象，用nodeport暴露给公网\"><a href=\"#如果是bare-metal-安装，Ingress前面还要有一层service来代理所有的ingress对象，用nodeport暴露给公网\" class=\"headerlink\" title=\"如果是bare-metal 安装，Ingress前面还要有一层service来代理所有的ingress对象，用nodeport暴露给公网\"></a>如果是bare-metal 安装，Ingress前面还要有一层service来代理所有的ingress对象，用nodeport暴露给公网</h3><pre><code>kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.30.0/deploy/static/provider/baremetal/service-nodeport.yaml\n复制代码\n</code></pre>\n<h3 id=\"踩坑提醒\"><a href=\"#踩坑提醒\" class=\"headerlink\" title=\"踩坑提醒\"></a>踩坑提醒</h3><pre><code>#ingress-nginx-controller的镜像，拉下来会很慢很慢，去阿里搞搞，老问题不多说了，大概命令如下\ndocker pull registry.cn-hangzhou.aliyuncs.com/mycs/nginx-ingress-controller:0.30.0\n复制代码\n</code></pre>\n<h3 id=\"前面的搞好之后，创建Ingress对象，指向我们的web-demo-service，path就写pod里面的docker容器的webpath就好\"><a href=\"#前面的搞好之后，创建Ingress对象，指向我们的web-demo-service，path就写pod里面的docker容器的webpath就好\" class=\"headerlink\" title=\"前面的搞好之后，创建Ingress对象，指向我们的web-demo-service，path就写pod里面的docker容器的webpath就好\"></a>前面的搞好之后，创建Ingress对象，指向我们的web-demo-service，path就写pod里面的docker容器的webpath就好</h3><pre><code>apiVersion: networking.k8s.io/v1beta1\nkind: Ingress\nmetadata:\n  name: web-demo-ingress\nspec:\n  tls:\n  - hosts:\n    - webdemo.example.com\n    secretName: web-demo-secret\n  rules:\n  - host: webdemo.example.com\n    http:\n      paths:\n      - path: /healthZ\n        backend:\n          serviceName: web-demo-service\n          servicePort: 80\n</code></pre>\n<h3 id=\"测试下是否正常：\"><a href=\"#测试下是否正常：\" class=\"headerlink\" title=\"测试下是否正常：\"></a>测试下是否正常：</h3><p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d2c1576647a349039d50273b661630be~tplv-k3u1fbpfcp-watermark.awebp\"></p>\n<pre><code>#31978是上图 nodeport service的443映射端口\ncurl  --resolve webdemo.example.com:31978:172.26.11.50 https://webdemo.example.com:31978/healthZ —insecure\nHello GO WEB \n复制代码\n</code></pre>\n<h2 id=\"八、probe探针\"><a href=\"#八、probe探针\" class=\"headerlink\" title=\"八、probe探针\"></a>八、probe探针</h2><h3 id=\"livenessProbe，用cat命令来检查存活\"><a href=\"#livenessProbe，用cat命令来检查存活\" class=\"headerlink\" title=\"livenessProbe，用cat命令来检查存活\"></a>livenessProbe，用cat命令来检查存活</h3><pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: web-demo-testprobe-deployment\n  labels:\n    app: web-demo-testprobe\nspec:\n  #ReplicaSet对象，约束pod数量\n  replicas: 2\n  selector:\n    matchLabels:\n      app: web-demo-testprobe\n  template:\n    metadata:\n      labels:\n        app: web-demo-testprobe\n    spec:\n      containers:\n      - name: web-demo-testprobe\n        image: ryetan/webdemo:v2\n        args:\n          - /sh\n          - -c\n          - touch /tmp/healthy; sleep 30; rm -rf /tmp/healthy; sleep 600\n        livenessProbe:\n          exec:\n            command:\n            - cat\n            - /tmp/healthy\n          initialDelaySeconds: 5\n          periodSeconds: 5\n        ports:\n        - containerPort: 8888\n          name: web-demo-port \n</code></pre>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fb907e802ce649b183572eb51dc2766e~tplv-k3u1fbpfcp-watermark.awebp\"></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fb208e5f3a2c478087a50fcb27e8f005~tplv-k3u1fbpfcp-watermark.awebp\"></p>\n<h3 id=\"livenessProbe，用http请求来检查存活\"><a href=\"#livenessProbe，用http请求来检查存活\" class=\"headerlink\" title=\"livenessProbe，用http请求来检查存活\"></a>livenessProbe，用http请求来检查存活</h3><p>先改下go-web的代码，让healthZ这个接口10s之后返回500</p>\n<pre><code>func main() &#123;\n   started := time.Now()\n   http.HandleFunc(&quot;/healthZ&quot;, func(w http.ResponseWriter, req *http.Request) &#123;\n      duration := time.Now().Sub(started)\n      if duration.Seconds() &gt; 10 &#123;\n         w.WriteHeader(500)\n         w.Write([]byte(fmt.Sprintf(&quot;error: %v&quot;, duration.Seconds())))\n      &#125; else &#123;\n         w.WriteHeader(200)\n         w.Write([]byte(&quot;ok&quot;))\n      &#125;\n   &#125;)\n   fmt.Println(&quot;web run&quot;)\n   http.ListenAndServe(&quot;:8888&quot;,nil)\n&#125;\n</code></pre>\n<p>web-demo-httptestprobe.yaml</p>\n<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: web-demo-testprobe-deployment\n  labels:\n    app: web-demo-testprobe\nspec:\n  #ReplicaSet对象，约束pod数量\n  replicas: 2\n  selector:\n    matchLabels:\n      app: web-demo-testprobe\n  template:\n    metadata:\n      labels:\n        app: web-demo-testprobe\n    spec:\n      containers:\n      - name: web-demo-testprobe\n        image: ryetan/webdemo:v4\n        livenessProbe:\n          httpGet:\n            path: /healthZ\n            port: 8888\n            httpHeaders:\n            - name: Custom-Header\n              value: Awesome\n          initialDelaySeconds: 3\n          periodSeconds: 3\n        ports:\n        - containerPort: 8888\n          name: web-demo-port\n</code></pre>\n<h3 id=\"还有一种是用tcp来测试，类似于telnet，以及就绪探针等其它知识抄抄下官方文档：\"><a href=\"#还有一种是用tcp来测试，类似于telnet，以及就绪探针等其它知识抄抄下官方文档：\" class=\"headerlink\" title=\"还有一种是用tcp来测试，类似于telnet，以及就绪探针等其它知识抄抄下官方文档：\"></a>还有一种是用tcp来测试，类似于telnet，以及就绪探针等其它知识抄抄下官方文档：</h3><p><em>第三种类型的存活探测是使用 TCP 套接字。 通过配置，kubelet 会尝试在指定端口和容器建立套接字链接。 如果能建立连接，这个容器就被看作是健康的，如果不能则这个容器就被看作是有问题的。</em></p>\n<p><em><a href=\"https://link.juejin.cn/?target=https://raw.githubusercontent.com/kubernetes/website/master/content/zh/examples/pods/probe/tcp-liveness-readiness.yaml\" title=\"https://raw.githubusercontent.com/kubernetes/website/master/content/zh/examples/pods/probe/tcp-liveness-readiness.yaml\">pods/probe/tcp-liveness-readiness.yaml</a></em></p>\n<pre><code>apiVersion: v1\nkind: Pod\nmetadata:  name: goproxy\n  labels:\n    app: goproxy\nspec:  containers:\n  - name: goproxy\n    image: k8s.gcr.io/goproxy:0.1\n    ports:\n    - containerPort: 8080\n    readinessProbe:\n      tcpSocket:\n        port: 8080\n      initialDelaySeconds: 5\n      periodSeconds: 10\n    livenessProbe:\n      tcpSocket:\n        port: 8080\n      initialDelaySeconds: 15\n      periodSeconds: 20\n</code></pre>\n<p><em>如你所见，TCP 检测的配置和 HTTP 检测非常相似。 下面这个例子同时使用就绪和存活探测器。kubelet 会在容器启动 5 秒后发送第一个就绪探测。 这会尝试连接 goproxy 容器的 8080 端口。 如果探测成功，这个 Pod 会被标记为就绪状态，kubelet 将继续每隔 10 秒运行一次检测。</em></p>\n<p><em>除了就绪探测，这个配置包括了一个存活探测。 kubelet 会在容器启动 15 秒后进行第一次存活探测。 就像就绪探测一样，会尝试连接 goproxy 容器的 8080 端口。 如果存活探测失败，这个容器会被重新启动。</em></p>\n<p><em>failureThreshold: 30 * periodSeconds: 10 =300S</em></p>\n<p><em>这两个参数组合起来最大300S是为了延迟检查的时间，防止重启，部署时在点火检查失败</em></p>\n<p><em><a href=\"https://link.juejin.cn/?target=https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/%23probe-v1-core\" title=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#probe-v1-core\">Probe</a> 有很多配置字段，可以使用这些字段精确的控制存活和就绪检测的行为：</em></p>\n<ul>\n<li><p>  initialDelaySeconds：容器启动后要等待多少秒后存活和就绪探测器才被初始化，默认是 0 秒，最小值是 0。_</p>\n</li>\n<li><p>  periodSeconds：执行探测的时间间隔（单位是秒）。默认是 10 秒。最小值是 1。_</p>\n</li>\n<li><p>  timeoutSeconds：探测的超时后等待多少秒。默认值是 1 秒。最小值是 1。_</p>\n</li>\n<li><p>  successThreshold：探测器在失败后，被视为成功的最小连续成功数。默认值是 1。 存活和启动探测的这个值必须是 1。最小值是 1。_</p>\n</li>\n<li><p>  failureThreshold：当探测失败时，Kubernetes 的重试次数。 存活探测情况下的放弃就意味着重新启动容器。 就绪探测情况下的放弃 Pod 会被打上未就绪的标签。默认值是 3。最小值是 1。_</p>\n</li>\n</ul>\n<p>在 Kubernetes 1.20 版本之前，exec 探针会忽略 timeoutSeconds：探针会无限期地 持续运行，甚至可能超过所配置的限期，直到返回结果为止。</p>\n<p>这一缺陷在 Kubernetes v1.20 版本中得到修复。你可能一直依赖于之前错误的探测行为， 甚至你都没有觉察到这一问题的存在，因为默认的超时值是 1 秒钟。 作为集群管理员，你可以在所有的 kubelet 上禁用 ExecProbeTimeout <a href=\"https://link.juejin.cn/?target=https://kubernetes.io/zh/docs/reference/command-line-tools-reference/feature-gates/\" title=\"https://kubernetes.io/zh/docs/reference/command-line-tools-reference/feature-gates/\">特性门控</a> （将其设置为 false），从而恢复之前版本中的运行行为，之后当集群中所有的 exec 探针都设置了 timeoutSeconds 参数后，移除此标志重载。 如果你有 Pods 受到此默认 1 秒钟超时值的影响，你应该更新 Pod 对应的探针的 超时值，这样才能为最终去除该特性门控做好准备。_</p>\n<p>当此缺陷被修复之后，在使用 dockershim 容器运行时的 Kubernetes 1.20+ 版本中，对于 exec 探针而言，容器中的进程可能会因为超时值的设置保持持续运行， 即使探针返回了失败状态。</p>\n","text":" [Figure] livenessProbe，用http请求来检查存活先改下go-web的代码，让healthZ这个接口10s之后返回500func main() &#123;   started := time.Now()   http.HandleFunc(&quot;/h","link":"","raw":null,"photos":[],"categories":[],"tags":[]}]}